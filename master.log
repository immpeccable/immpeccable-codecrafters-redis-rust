warning: unused imports: `TcpListener` and `TcpStream`
 --> src/main.rs:6:16
  |
6 | use std::net::{TcpListener, TcpStream};
  |                ^^^^^^^^^^^  ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `BufReader`, `Error`, `Read`, and `Seek`
  --> src/classes/CommandExecutor.rs:11:19
   |
11 |     io::{BufRead, BufReader, Error, Read, Seek, Write},
   |                   ^^^^^^^^^  ^^^^^  ^^^^  ^^^^

warning: unused imports: `Seek` and `Write`
 --> src/classes/Db.rs:3:43
  |
3 |     io::{BufRead, BufReader, Error, Read, Seek, Write},
  |                                           ^^^^  ^^^^^

warning: unused variable: `commands`
  --> src/classes/CommandExecutor.rs:83:9
   |
83 |         commands: &mut Vec<RespDataType>,
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_commands`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `state`
  --> src/classes/CommandExecutor.rs:85:9
   |
85 |         state: State,
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `state`
   --> src/classes/CommandExecutor.rs:135:55
    |
135 |     async fn psync(&mut self, stream: &mut TcpStream, state: State) {
    |                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused import: `Write`
  --> src/classes/CommandExecutor.rs:11:49
   |
11 |     io::{BufRead, BufReader, Error, Read, Seek, Write},
   |                                                 ^^^^^

warning: unused import: `BufRead`
  --> src/classes/CommandExecutor.rs:11:10
   |
11 |     io::{BufRead, BufReader, Error, Read, Seek, Write},
   |          ^^^^^^^

warning: unused import: `Read`
 --> src/main.rs:5:15
  |
5 | use std::io::{Read, Write};
  |               ^^^^

warning: unused import: `Write`
 --> src/main.rs:5:21
  |
5 | use std::io::{Read, Write};
  |                     ^^^^^

warning: unused variable: `i`
  --> src/classes/Parser.rs:22:13
   |
22 |         for i in 0..n {
   |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: variable `command_size` is assigned to, but never used
  --> src/classes/Parser.rs:31:17
   |
31 |         let mut command_size: u32 = 0;
   |                 ^^^^^^^^^^^^
   |
   = note: consider using `_command_size` instead

warning: value assigned to `command_size` is never read
  --> src/classes/Parser.rs:35:17
   |
35 |                 command_size = command_size_as_string.parse::<u32>().unwrap();
   |                 ^^^^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?
   = note: `#[warn(unused_assignments)]` on by default

warning: variants `SimpleString`, `SimpleError`, `Integer`, `Nil`, and `Boolean` are never constructed
 --> src/classes/RespDataType.rs:3:5
  |
2 | pub enum RespDataType {
  |          ------------ variants in this enum
3 |     SimpleString(String),
  |     ^^^^^^^^^^^^
4 |     SimpleError(String),
  |     ^^^^^^^^^^^
5 |     Integer(i64),
  |     ^^^^^^^
...
8 |     Nil,
  |     ^^^
9 |     Boolean(bool),
  |     ^^^^^^^
  |
  = note: `RespDataType` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis
  = note: `#[warn(dead_code)]` on by default

warning: field `master_stream` is never read
  --> src/classes/State.rs:16:9
   |
9  | pub struct State {
   |            ----- field in this struct
...
16 |     pub master_stream: Option<TcpStream>,
   |         ^^^^^^^^^^^^^

warning: module `CommandExecutor` should have a snake case name
 --> src/classes/mod.rs:1:9
  |
1 | pub mod CommandExecutor;
  |         ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `command_executor`
  |
  = note: `#[warn(non_snake_case)]` on by default

warning: module `Db` should have a snake case name
 --> src/classes/mod.rs:2:9
  |
2 | pub mod Db;
  |         ^^ help: convert the identifier to snake case: `db`

warning: module `ExpiringValue` should have a snake case name
 --> src/classes/mod.rs:3:9
  |
3 | pub mod ExpiringValue;
  |         ^^^^^^^^^^^^^ help: convert the identifier to snake case: `expiring_value`

warning: module `Parser` should have a snake case name
 --> src/classes/mod.rs:4:9
  |
4 | pub mod Parser;
  |         ^^^^^^ help: convert the identifier to snake case: `parser`

warning: module `RespDataType` should have a snake case name
 --> src/classes/mod.rs:5:9
  |
5 | pub mod RespDataType;
  |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `resp_data_type`

warning: module `State` should have a snake case name
 --> src/classes/mod.rs:6:9
  |
6 | pub mod State;
  |         ^^^^^ help: convert the identifier to snake case (notice the capitalization): `state`

warning: module `Constants` should have a snake case name
 --> src/classes/mod.rs:7:9
  |
7 | pub mod Constants;
  |         ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `constants`

warning: `codecrafters-redis` (bin "codecrafters-redis") generated 22 warnings (run `cargo fix --bin "codecrafters-redis"` to apply 3 suggestions)
    Finished `release` profile [optimized] target(s) in 0.02s

thread 'main' panicked at src/main.rs:52:29:
couldn't bind to port 6379: Address already in use (os error 48)
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
